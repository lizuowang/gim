// Code generated by Kitex v0.11.3. DO NOT EDIT.

package imrpc

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	rpc "github.com/lizuowang/gim/service/api/server/kitex_gen/im/rpc"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"hello": kitex.NewMethodInfo(
		helloHandler,
		newImRpcHelloArgs,
		newImRpcHelloResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SendMsgToUser": kitex.NewMethodInfo(
		sendMsgToUserHandler,
		newImRpcSendMsgToUserArgs,
		newImRpcSendMsgToUserResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SendMsgToUserByTgid": kitex.NewMethodInfo(
		sendMsgToUserByTgidHandler,
		newImRpcSendMsgToUserByTgidArgs,
		newImRpcSendMsgToUserByTgidResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"StopUserClient": kitex.NewMethodInfo(
		stopUserClientHandler,
		newImRpcStopUserClientArgs,
		newImRpcStopUserClientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetSysInfo": kitex.NewMethodInfo(
		getSysInfoHandler,
		newImRpcGetSysInfoArgs,
		newImRpcGetSysInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	imRpcServiceInfo                = NewServiceInfo()
	imRpcServiceInfoForClient       = NewServiceInfoForClient()
	imRpcServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return imRpcServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return imRpcServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return imRpcServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ImRpc"
	handlerType := (*rpc.ImRpc)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "rpc",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.11.3",
		Extra:           extra,
	}
	return svcInfo
}

func helloHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.ImRpcHelloArgs)
	realResult := result.(*rpc.ImRpcHelloResult)
	success, err := handler.(rpc.ImRpc).Hello(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImRpcHelloArgs() interface{} {
	return rpc.NewImRpcHelloArgs()
}

func newImRpcHelloResult() interface{} {
	return rpc.NewImRpcHelloResult()
}

func sendMsgToUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.ImRpcSendMsgToUserArgs)
	realResult := result.(*rpc.ImRpcSendMsgToUserResult)
	success, err := handler.(rpc.ImRpc).SendMsgToUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImRpcSendMsgToUserArgs() interface{} {
	return rpc.NewImRpcSendMsgToUserArgs()
}

func newImRpcSendMsgToUserResult() interface{} {
	return rpc.NewImRpcSendMsgToUserResult()
}

func sendMsgToUserByTgidHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.ImRpcSendMsgToUserByTgidArgs)
	realResult := result.(*rpc.ImRpcSendMsgToUserByTgidResult)
	success, err := handler.(rpc.ImRpc).SendMsgToUserByTgid(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImRpcSendMsgToUserByTgidArgs() interface{} {
	return rpc.NewImRpcSendMsgToUserByTgidArgs()
}

func newImRpcSendMsgToUserByTgidResult() interface{} {
	return rpc.NewImRpcSendMsgToUserByTgidResult()
}

func stopUserClientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*rpc.ImRpcStopUserClientArgs)
	realResult := result.(*rpc.ImRpcStopUserClientResult)
	success, err := handler.(rpc.ImRpc).StopUserClient(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImRpcStopUserClientArgs() interface{} {
	return rpc.NewImRpcStopUserClientArgs()
}

func newImRpcStopUserClientResult() interface{} {
	return rpc.NewImRpcStopUserClientResult()
}

func getSysInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	_ = arg.(*rpc.ImRpcGetSysInfoArgs)
	realResult := result.(*rpc.ImRpcGetSysInfoResult)
	success, err := handler.(rpc.ImRpc).GetSysInfo(ctx)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newImRpcGetSysInfoArgs() interface{} {
	return rpc.NewImRpcGetSysInfoArgs()
}

func newImRpcGetSysInfoResult() interface{} {
	return rpc.NewImRpcGetSysInfoResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Hello(ctx context.Context, req *rpc.Request) (r *rpc.Response, err error) {
	var _args rpc.ImRpcHelloArgs
	_args.Req = req
	var _result rpc.ImRpcHelloResult
	if err = p.c.Call(ctx, "hello", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendMsgToUser(ctx context.Context, req *rpc.SendMsgReq) (r *rpc.SendMsgRsp, err error) {
	var _args rpc.ImRpcSendMsgToUserArgs
	_args.Req = req
	var _result rpc.ImRpcSendMsgToUserResult
	if err = p.c.Call(ctx, "SendMsgToUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SendMsgToUserByTgid(ctx context.Context, req *rpc.SendMsgByTgidReq) (r *rpc.SendMsgRsp, err error) {
	var _args rpc.ImRpcSendMsgToUserByTgidArgs
	_args.Req = req
	var _result rpc.ImRpcSendMsgToUserByTgidResult
	if err = p.c.Call(ctx, "SendMsgToUserByTgid", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) StopUserClient(ctx context.Context, req *rpc.UserIdReq) (r *rpc.StopUserClientRsp, err error) {
	var _args rpc.ImRpcStopUserClientArgs
	_args.Req = req
	var _result rpc.ImRpcStopUserClientResult
	if err = p.c.Call(ctx, "StopUserClient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSysInfo(ctx context.Context) (r *rpc.BytesRsp, err error) {
	var _args rpc.ImRpcGetSysInfoArgs
	var _result rpc.ImRpcGetSysInfoResult
	if err = p.c.Call(ctx, "GetSysInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
